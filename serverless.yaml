service: NouriMeals-API

# Reference: https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

frameworkVersion: "2"
enableLocalInstallationFallback: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      inMemory: false

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  environment:
    DYNAMODB_TABLE: "${self:service}-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
        - ssm:GetParameter
      Resource:
        - "arn:aws:ssm:us-west-2:274772592742:parameter/NouriServerless/jwtSecretKey/dev"
    - Effect: "Allow"
      Action:
        - kms:Decrypt
      Resource:
        - "arn:aws:ssm:us-west-2:274772592742:key/alias/aws/smm"

functions:
  authorize:
    handler: src/functions/authorize.authorize
  signUp:
    handler: src/functions/signUp.signUp
    events:
      - http:
          method: post
          # cors: true
          path: /signup
          # TODO: Fix schema validation
          # request:
          #   passThrough: NEVER
          #   schema:
          #     application/json: "$(file(src/schema/create_user.json))"
  login:
    handler: src/functions/login.login
    events:
      - http:
          method: post
          # cors: true
          path: /login
          # request:
          #   passThrough: NEVER
          #   schema:
          #     application/json: "$(file(src/schema/login.json))"
  getAllUsers:
    handler: src/functions/getAllUsers.getAllUsers
    events:
      - http:
          method: get
          # cors: true
          path: /users
          authorizer: authorize        
  getFamilyDetails:
    handler: src/functions/getFamilyDetails.getFamilyDetails
    events:
      - http:
          method: get
          # cors: true
          path: /family
          authorizer: authorize
  updateFamilyDetails:
    handler: src/functions/updateFamilyDetails.updateFamilyDetails
    events:
      - http:
          method: put
          # cors: true
          path: /family
          authorizer: authorize 
          # request:
          #   passThrough: NEVER
          #   schema:
          #     application/json: "$(file(src/schema/update_family_details.json))"
  updatePassword:
    handler: src/functions/updatePassword.updatePassword
    events:
      - http:
          method: put
          # cors: true
          path: /family/password
          authorizer: authorize 
  deleteUser:
    handler: src/functions/deleteUser.deleteUser
    events:
      - http:
          method: delete
          # cors: true
          path: /user
          authorizer: authorize 


resources:
  Resources:
    nouriTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: "${self:provider.environment.DYNAMODB_TABLE}"
        AttributeDefinitions:
            - AttributeName: chapter
              AttributeType: S
            - AttributeName: docSort
              AttributeType: S
        KeySchema:
            - AttributeName: chapter
              KeyType: HASH
            - AttributeName: docSort
              KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1